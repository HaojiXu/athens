{"version":3,"sources":["athens/components/default_components.cljs"],"mappings":";;;;;AASA,AAAA,AAAMA,AACHC,AAAIC,AAASC;AADhB,AAEE,AAAMC,AAAsB,AAAA,AAAe,AAAA,AAAA,AAACC,AAAyBJ;AAArE,AACE,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAqCL,AACA,AAACO,AACCJ,AACAF,AACAC,AACF,AAACM;AALtC,AAAA,AAAAH,AAAAA,AAACC,AAAAA,AAAAA;;AAQL,AAAA,AAAMG,AACHC;AADH,AAEE,AAAA,AAACC,AAAkBD;;AAIrB,AAAA,AAAA,AAAA,AAAA,AAAKE,AAEM,AAAKC,AAAEb;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAEsB,AAAA,AAAA,AAACD,AAAcC;;;AAGhD,AAAA,AAAA,AAAA,AAAA,AAAKc,AAEM,AAAKD,AAAEb;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGsB,AAAA,AAAA,AAACD,AAAcC;;;AAIhD,AAAA,AAAA,AAAA,AAAA,AAAKe,AAEM,AAAKL,AAAQG;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGyB,AAAA,AAAsC,AAAA,AAACG,AAAI,AAAA,AAACL,AAAiCD;;AAIjH,AAAA,AAAA,AAAA,AAAA,AAAKO,AAEM,AAAKP,AAAQG;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGyB,AAACJ,AAAaC;;AAIlD,AAAA,AAAKQ,AAAYN,AAAeE,AAAeC,AAAwBE","names":["athens.components.default-components/todo-on-click","uid","from-str","to-str","current-block-content","athens.db/get-block","G__56190","re-frame.core/dispatch","clojure.string/replace","athens.util/now-ts","athens.components.default-components/find-weblink","content","cljs.core/re-find","athens.components.default-components/component-todo","_","athens.components.default-components/component-done","athens.components.default-components/component-youtube-embed","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.components.default-components/component-generic-embed","athens.components.default-components/components"],"sourcesContent":["(ns athens.components.default-components\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [now-ts]]\n    [re-frame.core :refer [dispatch]]))\n\n;; Note to contributors: After you define the component, you should add it in the exported components vector at bottom.\n\n;; ---- Helper functions for default components ----\n(defn todo-on-click\n  [uid from-str to-str]\n  (let [current-block-content (:block/string (db/get-block [:block/uid uid]))]\n    (dispatch [:transact [{:block/uid    uid\n                           :block/string (clojure.string/replace\n                                           current-block-content\n                                           from-str\n                                           to-str)\n                           :edit/time    (now-ts)}]])))\n\n\n(defn find-weblink\n  [content]\n  (re-find #\"http.*\" content))\n\n\n;; ---- Todo component declaration ----\n(def component-todo\n  {:match #\"\\[\\[TODO\\]\\]\"\n   :render (fn [_ uid]\n             [:input {:type     \"checkbox\"\n                      :on-click #(todo-on-click uid #\"\\{\\{\\[\\[TODO\\]\\]\\}\\}\" \"{{[[DONE]]}}\")}])})\n\n\n(def component-done\n  {:match #\"\\[\\[DONE\\]\\]\"\n   :render (fn [_ uid]\n             [:input {:type     \"checkbox\"\n                      :checked  \"true\"\n                      :on-click #(todo-on-click uid #\"\\{\\{\\[\\[DONE\\]\\]\\}\\}\" \"{{[[TODO]]}}\")}])})\n\n\n;; ---- Website embed component declaration ----\n(def component-youtube-embed\n  {:match  #\"\\[\\[youtube\\]\\]\\:.*\"\n   :render (fn [content _]\n             [:iframe {:width       640\n                       :height      360\n                       :src         (str \"https://www.youtube.com/embed/\" (get (re-find #\".*v=([a-zA-Z0-9_\\-]+)\" content) 1))\n                       :allow       \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"}])})\n\n\n(def component-generic-embed\n  {:match  #\"iframe\\:.*\"\n   :render (fn [content _]\n             [:iframe {:width       640\n                       :height      360\n                       :src         (find-weblink content)}])})\n\n\n;; Exports\n(def components [component-todo component-done component-youtube-embed component-generic-embed])\n\n"]}