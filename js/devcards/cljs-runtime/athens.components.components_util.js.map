{"version":3,"sources":["athens/components/components_util.cljs"],"mappings":";;;AAKA,AAAA,AAAMA,AACHC,AAAQC;AADX,AAAA,AAAA,AAEWD;;AAGX;;;AAAA,AAAME,AAEHF,AAAQG;AAFX,AAGE,AAAMC,AAAW,AAACC,AAAK,AAAKC;AAAL,AACE,AAAM,AAACC,AAAW,AAAA,AAAQD,AAAMN;AAAhC,AACE,AAAA,AAASM;;AADX;;AACmBE;AAF5C,AAAA,AAAA,AAAA,AAAA,AAGoB,AAAKC;AAAL,AACE,AAAIA;;AACJ,AAAIA;AACvB,AAAA,AAAA,AAAIL,AACDA,AAAkBJ,AAAQG,AAC1BJ,AAAkBC,AAAQG","names":["athens.components.components-util/empty-component","content","_","athens.components.components-util/render-component","uid","render","cljs.core/some","comp","cljs.core/re-matches","athens.components.default-components/components","e"],"sourcesContent":["(ns athens.components.components-util\n  (:require\n    [athens.components.default-components :as default-components]))\n\n\n(defn empty-component\n  [content _]\n  [:button content])\n\n;; TODO: use metaprogramming to achieve dynamic rendering with both basic components and custom components\n(defn render-component\n  \"Renders a component using its parse tree & its uid.\"\n  [content uid]\n  (let [render     (some (fn [comp]\n                           (when (re-matches (:match comp) content)\n                             (:render comp))) default-components/components)]\n    [:span {:on-click (fn [e]\n                        (.. e preventDefault)\n                        (.. e stopPropagation))}\n     (if render\n       [render            content uid]\n       [empty-component   content uid])]))\n"]}