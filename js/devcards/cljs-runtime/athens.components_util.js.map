{"version":3,"sources":["athens/components_util.cljc"],"mappings":";;;;AAMA,AAAA,AAAMA,AACHC,AAAQC;AADX,AAEE,AAAAC,AAAC,AAAA,AAACC;AAAF,AAAA,AAAAD,AAAAA,AAAAA,AAAkBD,AAAAA;;AAFpB,AAAA,AAAA,AAAA,AAGkBD;;AAGlB;;;AAAA,AAAMI,AAEHJ,AAAQC;AAFX,AAGE,AAAMI,AAAW,AAACC,AAAOC,AAAgBC;AACnCC,AAAW,AAACC,AAAK,AAAKC;AAAL,AACE,AAAI,AAACC,AAAW,AAAA,AAACC,AAAIF,AAAaX;AAChC,AAAA,AAACa,AAAIF;;AADP;;AAEQN;AAJjC,AAKE,AAAII;AACF,AAACA,AAAAA,AAAAA,AAAkBT,AAAAA,AAAQC,AAAAA;;AAC3B,AAACF,AAAkBC,AAAQC","names":["athens.components-util/default-component","content","uid","fexpr__56199","cljs.core/constantly","athens.components-util/render-component","components","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.components.todo/components","athens.components.website-embeds/components","rendered","cljs.core/some","comp","cljs.core/re-matches","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.components-util\n  (:require\n    [athens.components.todo :as todo]\n    [athens.components.website-embeds :as website-embeds]))\n\n\n(defn default-component\n  [content uid]\n  ((constantly nil) uid)\n  [:span [:button content]])\n\n;; TODO: use metaprogramming to achieve dynamic rendering with both basic components and custom components\n(defn render-component\n  \"Renders a component using its parse tree & its uid.\"\n  [content uid]\n  (let [components (concat todo/components website-embeds/components)\n        rendered   (some (fn [comp]\n                           (if (re-matches (get comp :match) content)\n                             (get comp :render)\n                             nil)) components)]\n    (if rendered\n      (rendered          content uid)\n      (default-component content uid))))\n"]}