{"version":3,"sources":["athens/components_util.cljc"],"mappings":";;;AAKA;;;AAAA,AAAMA,AAEHC,AAAQC;AAFX,AAGE,AAAMC,AAAW,AAACC,AAAOC;AAAzB,AACE,AAACC,AAAK,AAAKC;AAAL,AACE,AAAI,AAACC,AAAW,AAAA,AAACC,AAAIF,AAAaN;AAChC,AAAAS,AAAC,AAAA,AAACD,AAAIF;AAAN,AAAA,AAAAG,AAAAA,AAAAA,AAAoBT,AAAAA,AAAQC,AAAAA;;AAD9B;;AAEQC","names":["athens.components-util/render-component","content","uid","components","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","athens.components.todo/components","cljs.core/some","comp","cljs.core/re-matches","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fexpr__56198"],"sourcesContent":["(ns athens.components-util\n  (:require\n    [athens.components.todo :as todo]))\n\n;; TODO: use metaprogramming to achieve dynamic rendering with both basic components and custom components\n(defn render-component\n  \"Renders a component using its parse tree & its uid.\"\n  [content uid]\n  (let [components (concat todo/components)]\n    (some (fn [comp]\n            (if (re-matches (get comp :match) content)\n              ((get comp :render) content uid)\n              nil)) components)))\n"]}