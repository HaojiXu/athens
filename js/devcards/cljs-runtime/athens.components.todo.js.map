{"version":3,"sources":["athens/components/todo.cljs"],"mappings":";;;;;AAOA,AAAA,AAAMA,AACHC,AAAIC,AAASC;AADhB,AAGE,AAAMC,AAAsB,AAAA,AAACC,AAAI,AAAA,AAAA,AAACC,AAAyBL;AAA3D,AACE,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA0CN,AACL,AAACQ,AACCL,AACAF,AACAC,AACL,AAACO;AALnC,AAAA,AAAAH,AAAAA,AAACC,AAAAA,AAAAA;;AAQL,AAAA,AAAA,AAAA,AAAA,AAAKG,AAEM,AAAKC,AAAQX;AAAb,AACE,AAAAY,AAAC,AAAA,AAACC;AAAF,AAAA,AAAAD,AAAAA,AAAAA,AAAkBD,AAAAA,AAAQX,AAAAA;;AAD5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAG4B,AAAKc;AAAL,AACG,AAAIA;;AACJ,AAAIA;;AACJ,AAAA,AAAA,AAACf,AAAcC;;;AAGzD,AAAA,AAAA,AAAA,AAAA,AAAKe,AAEM,AAAKJ,AAAQX;AAAb,AACE,AAAAgB,AAAC,AAAA,AAACH;AAAF,AAAA,AAAAG,AAAAA,AAAAA,AAAkBL,AAAAA,AAAQX,AAAAA;;AAD5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAI4B,AAAKc;AAAL,AACG,AAAIA;;AACJ,AAAIA;;AACJ,AAAA,AAAA,AAACf,AAAcC;;;AAGzD,AAAA,AAAKiB,AAAYP,AAAeK","names":["athens.components.todo/todo-on-click","uid","from-str","to-str","current-block-content","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.db/get-block","G__56190","re-frame.core/dispatch","clojure.string/replace","athens.util/now-ts","athens.components.todo/component-todo","content","fexpr__56191","cljs.core/constantly","e","athens.components.todo/component-done","fexpr__56192","athens.components.todo/components"],"sourcesContent":["(ns athens.components.todo\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [now-ts]]\n    [re-frame.core :refer [dispatch]]))\n\n\n(defn todo-on-click\n  [uid from-str to-str]\n\n  (let [current-block-content (get (db/get-block [:block/uid uid]) :block/string)]\n    (dispatch [:transact [{:db/id [:block/uid uid]\n                           :block/string (clojure.string/replace\n                                           current-block-content\n                                           from-str\n                                           to-str)\n                           :edit/time (now-ts)}]])))\n\n\n(def component-todo\n  {:match #\"\\[\\[TODO\\]\\]\"\n   :render (fn [content uid]\n             ((constantly nil) content uid)\n             [:span [:input {:type     \"checkbox\"\n                             :on-click (fn [e] \n                                          (.. e preventDefault) \n                                          (.. e stopPropagation) \n                                          (todo-on-click uid #\"\\{\\{\\[\\[TODO\\]\\]\\}\\}\" \"{{[[DONE]]}}\"))}]])})\n\n\n(def component-done\n  {:match #\"\\[\\[DONE\\]\\]\"\n   :render (fn [content uid]\n             ((constantly nil) content uid)\n             [:span [:input {:type     \"checkbox\"\n                             :checked  \"true\"\n                             :on-click (fn [e] \n                                          (.. e preventDefault) \n                                          (.. e stopPropagation) \n                                          (todo-on-click uid #\"\\{\\{\\[\\[DONE\\]\\]\\}\\}\" \"{{[[TODO]]}}\"))}]])})\n\n\n(def components [component-todo component-done])\n"]}